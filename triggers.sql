--17

CREATE TABLE LOG1
(
    id             NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_name      VARCHAR2(255),
    timestamp      DATE,
    operation_name VARCHAR2(100),
    old_value      VARCHAR2(255),
    new_value      VARCHAR2(255),
    username       VARCHAR2(255)
);

create or replace PROCEDURE insert_log(operation_name_val IN VARCHAR2,
                                       old_val IN VARCHAR2,
                                       new_val IN VARCHAR2) IS
BEGIN
    INSERT INTO LOG1 (user_name, timestamp, operation_name, old_value,
                      new_value)
    VALUES (USER, SYSDATE, operation_name_val, old_val, new_val);
END;
/

CREATE OR REPLACE TRIGGER PATIENTS_LOGGER
    AFTER INSERT OR UPDATE OR DELETE
    ON PATIENTS
    FOR EACH ROW
BEGIN
    CASE
        WHEN INSERTING THEN
            insert_log('Insert', NULL, :NEW.EMAIL);
        WHEN UPDATING ('email') THEN
            insert_log('Update', :OLD.EMAIL, :NEW.EMAIL);
        WHEN DELETING THEN
            insert_log('Delete', :OLD.EMAIL, NULL);
        ELSE
            null;
        END CASE;
END;

UPDATE Patients SET email='ivan_line23@yandex.com' WHERE id=32;

SELECT user_name || ' ' || timestamp || ' ' || operation_name  || ' ' || old_value
 || ' ' || new_value  || ' ' || username FROM LOG1;

 -- 18
CREATE TABLE LOG2
(
    id             NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    table_info     VARCHAR2(255),
    timestamp      DATE,
    operation_name VARCHAR2(100),
    username       VARCHAR2(255)
);

create or replace PROCEDURE insert_schema_log(operation_name_val IN VARCHAR2,
                                              table_name IN VARCHAR2) IS
BEGIN
    INSERT INTO LOG2 (table_info, timestamp, operation_name, username)
    VALUES (table_name, SYSDATE, operation_name_val, USER);
END;
/

CREATE OR REPLACE TRIGGER SCHEMA_PERMISSIONS
    BEFORE CREATE OR DROP
    ON SCHEMA
DECLARE
    current_minutes Number := 0;
BEGIN
    current_minutes := extract(minute from cast(sysdate as timestamp));

    IF current_minutes > 10 AND current_minutes < 32
    THEN
        RAISE_APPLICATION_ERROR(-20000,
                                'Cannot edit database ' || ORA_DICT_OBJ_TYPE ||
                                ' named ' || ORA_DICT_OBJ_NAME ||
                                ' as requested by ' || ORA_DICT_OBJ_OWNER);

    ELSE
        DBMS_OUTPUT.PUT_LINE('You can make changes.');

        CASE
            WHEN INSERTING THEN
                insert_schema_log('Insert', ORA_DICT_OBJ_NAME);
            WHEN UPDATING ('email') THEN
                insert_schema_log('Update', ORA_DICT_OBJ_NAME);
            WHEN DELETING THEN
                insert_schema_log('Delete', ORA_DICT_OBJ_NAME);
            ELSE
                null;
            END CASE;
    end if;

END;

CREATE TABLE a_table (col1 NUMBER);

-- Отслеживать количество пациентов, закрепленных за врачом
-- одновременно, не допускать превышения установленного значения, которое
-- зависит от категории и стажа специалиста.
-- 2) При госпитализации контролировать занятость койко-мест, тип палат
-- (мужская, женская) и срок нахождения пациента в больнице (не более 14 дней).
-- 3) Каждый день обновлять информацию о количестве пациентов в
-- отделении и количестве свободных мест по палатам.
